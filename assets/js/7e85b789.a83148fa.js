"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[86934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,y=u["".concat(l,".").concat(m)]||u[m]||c[m]||a;return n?i.createElement(y,p(p({ref:t},d),{},{components:n})):i.createElement(y,p({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,p=new Array(a);p[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var s=2;s<a;s++)p[s]=n[s];return i.createElement.apply(null,p)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},46911:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});n(67294);var i=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function p(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const o={sidebar_position:3},l="Render participant videos",s={unversionedId:"basics/display-videos",id:"basics/display-videos",title:"Render participant videos",description:"To display the videos of all participants you need to show on the screen, you",source:"@site/docs/react-ui-kit/basics/display-videos.mdx",sourceDirName:"basics",slug:"/basics/display-videos",permalink:"/react-ui-kit/basics/display-videos",draft:!1,editUrl:"https://github.com/kgenots/kgenots-web/tree/main/docs/react-ui-kit/basics/display-videos.mdx",tags:[],version:"current",lastUpdatedAt:1692164292,formattedLastUpdatedAt:"2023\ub144 8\uc6d4 16\uc77c",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Prerequisite",permalink:"/react-ui-kit/basics/integrate"},next:{title:"Gallery",permalink:"/react-ui-kit/components"}},d={},c=[{value:"Render each participant manually",id:"render-each-participant-manually",level:2},{value:"Grid Components",id:"grid-components",level:2},{value:"Parent Grid Component",id:"parent-grid-component",level:4},{value:"Normal Grid Components",id:"normal-grid-components",level:4},{value:"DyteSimpleGrid",id:"dytesimplegrid",level:5},{value:"DyteSimpleGrid",id:"dytesimplegrid-1",level:5},{value:"DyteMixedGrid",id:"dytemixedgrid",level:5},{value:"Example for SimpleGrid",id:"example-for-simplegrid",level:5}],u={toc:c};function m(e){var{components:t}=e,n=p(e,["components"]);return(0,i.kt)("wrapper",a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"render-participant-videos"},"Render participant videos"),(0,i.kt)("p",null,"To display the videos of all participants you need to show on the screen, you\ncan either render each participant tile manually or choose from our pre built\nvideo tile grid components"),(0,i.kt)("h2",{id:"render-each-participant-manually"},"Render each participant manually"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Meeting() {\n  const { meeting } = useDyteMeeting();\n  const activeParticipants = useDyteSelector(\n    (meeting) => meeting.participants.active\n  );\n\n  function ParticipantTile({ participant, meeting }) {\n    return (\n      <DyteParticipantTile\n        participant={participant}\n        style={{\n          maxWidth: '240px',\n        }}\n      >\n        <DyteNameTag participant={participant} meeting={meeting}>\n          <DyteAudioVisualizer participant={participant} />\n        </DyteNameTag>\n        <DyteAvatar size=\"sm\" participant={participant} />\n      </DyteParticipantTile>\n    );\n  }\n\n  return (\n    <div\n      id=\"grid\"\n      style={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignContent: 'center',\n        justifyContent: 'center',\n        gap: '1rem',\n      }}\n    >\n      {activeParticipants.toArray().map((participant) => (\n        <ParticipantTile participant={participant} meeting={meeting} />\n      ))}\n    </div>\n  );\n}\n")),(0,i.kt)("p",null,"But in the real world, a video tile grid is more complex, it is responsive, tile\nsizes are dynamic, there are different layouts, the grid handles screensharing\netc."),(0,i.kt)("p",null,"Dyte has ready to use grid components, that you can use out of the box"),(0,i.kt)("h2",{id:"grid-components"},"Grid Components"),(0,i.kt)("p",null,"There are two types of grid components, so that the grid can be easily extended\nand modularized."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parent Grid component - ",(0,i.kt)("inlineCode",{parentName:"li"},"DyteGrid")),(0,i.kt)("li",{parentName:"ul"},"Child Grid components each having a different layour - ",(0,i.kt)("inlineCode",{parentName:"li"},"DyteSimpleGrid"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"DyteMixedGrid"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"DyteSpotlightGrid"))),(0,i.kt)("h4",{id:"parent-grid-component"},"Parent Grid Component"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DyteGrid")," component is a monolith component which handles all grid related\nevents and data on it's own and passes the following props to it's children."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Prop"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"participants[]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Active Participants")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"pinnedParticipants[]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Pinned Participants")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"screenShareParticipants[]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Participants who are screen sharing")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"plugins[]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Active Plugins")))),(0,i.kt)("p",null,"These props are passed to it's children which it computes from the UI Config\nwhich is passed to it. By default it will use the default UI Config."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Try editing the ",(0,i.kt)("inlineCode",{parentName:"p"},"aspectRatio")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"gap")," props.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function Example() {\n  const { meeting } = useDyteMeeting();\n\n  return (\n    <div style={{ width: \'100%\', height: \'400px\' }}>\n      <DyteGrid meeting={meeting} aspectRatio="16:9" gap="8" size="sm" />\n    </div>\n  );\n}\n')),(0,i.kt)("h4",{id:"normal-grid-components"},"Normal Grid Components"),(0,i.kt)("p",null,"These components just accept the props mentioned above and render the UI."),(0,i.kt)("p",null,"Read more about them in their Reference pages."),(0,i.kt)("h5",{id:"dytesimplegrid"},"DyteSimpleGrid"),(0,i.kt)("p",null,"Accepts: ",(0,i.kt)("inlineCode",{parentName:"p"},"participants"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pinnedParticipants"),"."),(0,i.kt)("p",null,"This grid renders just the ParticipantTiles of the participants you pass to it.\nIt also brings ",(0,i.kt)("inlineCode",{parentName:"p"},"pinnedParticipants")," to the start of the grid."),(0,i.kt)("h5",{id:"dytesimplegrid-1"},"DyteSimpleGrid"),(0,i.kt)("p",null,"Accepts: ",(0,i.kt)("inlineCode",{parentName:"p"},"participants"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pinnedParticipants"),"."),(0,i.kt)("p",null,"This grid renders the ParticipantTiles of the participants and\npinnedParticipants in separate grids."),(0,i.kt)("p",null,"Pinned participants are in spotlight area, i.e; larger grid."),(0,i.kt)("h5",{id:"dytemixedgrid"},"DyteMixedGrid"),(0,i.kt)("p",null,"Accepts: ",(0,i.kt)("inlineCode",{parentName:"p"},"participants"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pinnedParticipants"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"screenShareParticipants"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"plugins"),"."),(0,i.kt)("p",null,"This grid renders screenshares as well as plugins in the main larger view and\nrenders a smaller grid on the right side which is configurable via the UI\nConfig. You can use SimleGrid or SpotlightGrid here."),(0,i.kt)("p",null,"If you just want to render ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," twice in a SimpleGrid:"),(0,i.kt)("h5",{id:"example-for-simplegrid"},"Example for SimpleGrid"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Example() {\n  const { meeting } = useDyteMeeting();\n  const [count, setCount] = useState(2);\n\n  if (!meeting) return null;\n\n  const add = () => setCount((count) => count + 1);\n  const remove = () => count > 1 && setCount((count) => count - 1);\n\n  const participants = new Array(count).fill(meeting.self);\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'center',\n          gap: '12px',\n        }}\n      >\n        <DyteButton onClick={add}>Add</DyteButton>\n        <DyteButton variant=\"danger\" onClick={remove}>\n          Remove\n        </DyteButton>\n      </div>\n      <div style={{ width: '100%', height: '400px' }}>\n        <DyteSimpleGrid\n          aspectRatio=\"16:9\"\n          gap=\"8\"\n          participants={participants}\n        />\n      </div>\n    </div>\n  );\n}\n")))}m.isMDXComponent=!0}}]);