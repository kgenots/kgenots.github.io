"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[97225],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),g=a,m=u["".concat(l,".").concat(g)]||u[g]||c[g]||r;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},57010:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});n(67294);var i=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={sidebar_position:6},l="Events",p={unversionedId:"events",id:"events",title:"Events",description:"Local User - Events",source:"@site/docs/ios/events.mdx",sourceDirName:".",slug:"/events",permalink:"/ios/events",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/ios/events.mdx",tags:[],version:"current",lastUpdatedAt:1692164292,formattedLastUpdatedAt:"2023\ub144 8\uc6d4 16\uc77c",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/ios/"},next:{title:"Sample app",permalink:"/ios/sample-app"}},d={},c=[{value:"Local User - Events",id:"local-user---events",level:2},{value:"Room joined",id:"room-joined",level:3},{value:"Video update",id:"video-update",level:3},{value:"Audio update",id:"audio-update",level:3},{value:"Room disconnected update",id:"room-disconnected-update",level:3},{value:"Proximity changed",id:"proximity-changed",level:3},{value:"Waitlist status",id:"waitlist-status",level:3},{value:"Participants list events",id:"participants-list-events",level:2},{value:"Participant joined",id:"participant-joined",level:3},{value:"Participant left",id:"participant-left",level:3},{value:"Screenshare updates",id:"screenshare-updates",level:3},{value:"Grid change",id:"grid-change",level:3},{value:"Video update",id:"video-update-1",level:3},{value:"Audio update",id:"audio-update-1",level:3},{value:"Active speaker",id:"active-speaker",level:3},{value:"Pinned participant",id:"pinned-participant",level:3},{value:"Active participants list change",id:"active-participants-list-change",level:3},{value:"Recording",id:"recording",level:2},{value:"Get active recording state",id:"get-active-recording-state",level:3},{value:"Listen to recording state changes",id:"listen-to-recording-state-changes",level:3}],u={toc:c};function g(e){var{components:t}=e,n=o(e,["components"]);return(0,i.kt)("wrapper",r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"events"},"Events"),(0,i.kt)("h2",{id:"local-user---events"},"Local User - Events"),(0,i.kt)("p",null,"You can subscribe to various events on the local user by implementing\n",(0,i.kt)("inlineCode",{parentName:"p"},"DyteSelfEventsListener")," and passing the object to\n",(0,i.kt)("inlineCode",{parentName:"p"},"meeting.addSelfEventsListener(dyteSelfEventsListener)"),"."),(0,i.kt)("h3",{id:"room-joined"},"Room joined"),(0,i.kt)("p",null,"Triggered when the room join event completes and now the meeting is ready to\nproduce and consume media."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"extension MeetingViewModel: DyteSelfEventsListener {\n    func onRoomJoined() {\n        //Room Joined\n    }\n}\n")),(0,i.kt)("h3",{id:"video-update"},"Video update"),(0,i.kt)("p",null,"Triggered when the user starts / stops the video using ",(0,i.kt)("inlineCode",{parentName:"p"},"enableVideo")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"disableVideo")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"extension MeetingViewModel: DyteSelfEventsListener {\n    func onVideoUpdate(videoEnabled: Bool) {\n      if (videoEnabled) {\n        // video is enabled, and other participants in room can see local user\n      } else {\n        // video is disabled, and other participants in room can not see local user.\n      }\n    }\n}\n")),(0,i.kt)("h3",{id:"audio-update"},"Audio update"),(0,i.kt)("p",null,"Triggered when the user starts / stops the audio using ",(0,i.kt)("inlineCode",{parentName:"p"},"enableAudio")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"disableAudio")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"\nextension MeetingViewModel: DyteSelfEventsListener {\n    func onAudioUpdate(audioEnabled: Bool) {\n      if (audioEnabled) {\n        // audio is enabled, and other participants in room can hear local user\n      } else {\n        // audio is disabled, and other participants in room can not hear local user.\n      }\n    }\n}\n")),(0,i.kt)("h3",{id:"room-disconnected-update"},"Room disconnected update"),(0,i.kt)("p",null,"Triggered when the user is disconnected due to media/network errors"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"extension MeetingViewModel: DyteSelfEventsListener {\n    func onMeetingRoomDisconnected() {\n      //disconnected\n    }\n}\n")),(0,i.kt)("h3",{id:"proximity-changed"},"Proximity changed"),(0,i.kt)("p",null,"Triggered when there is any change in proximity. Meaning if device is near ear\npiece which triggers display on/off."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"extension MeetingViewModel: DyteSelfEventsListener {\n    func onProximityChanged(isNear: Bool) {\n      // isNear\n      // if true, display should be turned off, as user might be speaking through earpiece\n      // if false, display should be turned on, as user might be looking at display and listening through speaker/earphones.\n    }\n}\n")),(0,i.kt)("h3",{id:"waitlist-status"},"Waitlist status"),(0,i.kt)("p",null,"For meetings whose waiting room is enabled:"),(0,i.kt)("p",null,"To get status of localUser in waiting room we can use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let waitListStatus = meeting.localUser.waitListStatus\n")),(0,i.kt)("p",null,"Developers can listen to those changes in ",(0,i.kt)("inlineCode",{parentName:"p"},"onWaitListStatusUpdate()")," callbacks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"extension MeetingViewModel: DyteSelfEventsListener {\n    func onWaitListStatusUpdate(waitListStatus: WaitListStatus) {\n\n    }\n}\n")),(0,i.kt)("h2",{id:"participants-list-events"},"Participants list events"),(0,i.kt)("p",null,"You can subscribe to events for all participants by implementing\n",(0,i.kt)("inlineCode",{parentName:"p"},"DyteParticipantEventsListener")," callback and then passing that object to\n",(0,i.kt)("inlineCode",{parentName:"p"},"meeting.addParticipantEventsListener(dyteParticipantEventsListener)")," method.\nHere are the supported methods:"),(0,i.kt)("h3",{id:"participant-joined"},"Participant joined"),(0,i.kt)("p",null,"Triggers an event when any participant joins the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantJoin(participant: DyteMeetingParticipant) {\n            // your code here to handle new participant\n        }\n    }\n")),(0,i.kt)("h3",{id:"participant-left"},"Participant left"),(0,i.kt)("p",null,"Triggers an event when any participant leaves the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantLeave(participant: DyteMeetingParticipant) {\n            // your code here to handle participant left from meeting\n        }\n    }\n")),(0,i.kt)("h3",{id:"screenshare-updates"},"Screenshare updates"),(0,i.kt)("p",null,"Triggers an event when there is any change in screenshares in a meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onScreenSharesUpdated() {\n            // your code here to handle screenshares from meeting\n            // you can use `meeting.participants.screenshares` to get latest screenshare participants\n        }\n    }\n")),(0,i.kt)("h3",{id:"grid-change"},"Grid change"),(0,i.kt)("p",null,"Whenever there is a change in the GridInfo for the room, the following method is triggered.\ncalled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onGridUpdated(gridInfo: GridInfo) {\n            // your code here to handle grid changes.\n        }\n    }\n")),(0,i.kt)("h3",{id:"video-update-1"},"Video update"),(0,i.kt)("p",null,"Trigger an event when any participant starts / stops video."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onVideoUpdate(videoEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant video toggle update\n        }\n    }\n")),(0,i.kt)("h3",{id:"audio-update-1"},"Audio update"),(0,i.kt)("p",null,"Trigger an event when any participant starts / stops audio."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onAudioUpdate(audioEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant audio toggle update\n        }\n    }\n")),(0,i.kt)("h3",{id:"active-speaker"},"Active speaker"),(0,i.kt)("p",null,"Trigger an event when any is change in active speaker in the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveSpeakerChanged(participant: DyteMeetingParticipant) {\n            // your code here to handle active speaker\n        }\n\n        func onNoActiveSpeaker() {\n            // your code here to handle no active speaker\n        }\n    }\n")),(0,i.kt)("h3",{id:"pinned-participant"},"Pinned participant"),(0,i.kt)("p",null,"Trigger an event when any is change in pinned participant in the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantPinned(participant: DyteMeetingParticipant) {\n            // your code here to show pinned participant\n        }\n\n        func onParticipantUnpinned() {\n            // your code here to remove pinned participant\n        }\n    }\n")),(0,i.kt)("h3",{id:"active-participants-list-change"},"Active participants list change"),(0,i.kt)("p",null,"Triggers an event when any change in active participants list in the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveParticipantsChanged(active: [DyteMeetingParticipant]) {\n            // your code here to refresh active participants\n        }\n    }\n")),(0,i.kt)("h2",{id:"recording"},"Recording"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"meeting.recording")," object can be used start and stop recordings in a\nmeeting. You can also get the current status of a recording using this API."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"meeting.recording")," object has the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"recordingState"),": Indicates the current recording state of the meeting.")),(0,i.kt)("h3",{id:"get-active-recording-state"},"Get active recording state"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"meeting.recording.recordingState")," property describes the current state of\nthe recording. The valid states are ",(0,i.kt)("inlineCode",{parentName:"p"},"IDLE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"STARTING"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"RECORDING"),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},"STOPPING"),"."),(0,i.kt)("h3",{id:"listen-to-recording-state-changes"},"Listen to recording state changes"),(0,i.kt)("p",null,"The changes to ",(0,i.kt)("inlineCode",{parentName:"p"},"meeting.recording.recordingState")," can be listened by\nimplementing ",(0,i.kt)("inlineCode",{parentName:"p"},"onMeetingRecordingStateUpdated")," from\n",(0,i.kt)("inlineCode",{parentName:"p"},"DyteMeetingRoomEventsListener"),". You can attach this observer by calling\n",(0,i.kt)("inlineCode",{parentName:"p"},"meeting.addMeetingRoomEventsListener(listener)"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"meeting.addMeetingRoomEventsListener(object : DyteMeetingRoomEventsListener {\n    override fun onMeetingRecordingStarted() {\n      super.onMeetingRecordingStarted()\n      // on recording started\n    }\n\n    override fun onMeetingRecordingEnded() {\n      super.onMeetingRecordingEnded()\n      // on recording ended\n    }\n\n    override fun onMeetingRecordingStateUpdated(state: DyteRecordingState) {\n      super.onMeetingRecordingStateUpdated(state)\n      // on recording state update\n    }\n\n    override fun onMeetingRecordingStopError(e: Exception) {\n      super.onMeetingRecordingStopError(e)\n      // when local user tried to end recording but it fails\n    }\n  })\n")))}g.isMDXComponent=!0}}]);