"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[53995],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,v=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(v,s(s({ref:t},c),{},{components:n})):r.createElement(v,s({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79909:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>u});n(67294);var r=n(3905);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const o={title:"Livestream event listeners",description:"Livestream events to listen to for triggering",sidebar_position:3,tags:["mobile-core","livestream"]},l=void 0,p={unversionedId:"ios-core/livestream/dyte-livestream-listener",id:"ios-core/livestream/dyte-livestream-listener",title:"Livestream event listeners",description:"Livestream events to listen to for triggering",source:"@site/docs/archive/ios-core/livestream/dyte-livestream-listener.mdx",sourceDirName:"ios-core/livestream",slug:"/ios-core/livestream/dyte-livestream-listener",permalink:"/archive/ios-core/livestream/dyte-livestream-listener",draft:!1,tags:[{label:"mobile-core",permalink:"/archive/tags/mobile-core"},{label:"livestream",permalink:"/archive/tags/livestream"}],version:"current",sidebarPosition:3,frontMatter:{title:"Livestream event listeners",description:"Livestream events to listen to for triggering",sidebar_position:3,tags:["mobile-core","livestream"]},sidebar:"tutorialSidebar",previous:{title:"Livestream objects & methods",permalink:"/archive/ios-core/livestream/dyte-livestream-object"},next:{title:"Introduction",permalink:"/archive/ios-core/polls/introduction"}},c={},u=[{value:"Livestream events",id:"livestream-events",level:2}],m={toc:u};function d(e){var{components:t}=e,n=s(e,["components"]);return(0,r.kt)("wrapper",a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){i(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can listen to livestream events by attaching a listener by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"addLivestreamEventsListener")," on ",(0,r.kt)("inlineCode",{parentName:"p"},"dyteMobileClient")," object where ",(0,r.kt)("inlineCode",{parentName:"p"},"dyteMobileClient")," is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"DyteMobileClient()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"extension LivestreamViewController: DyteLiveStreamEventsListener {\n    public func onJoinRequestAccepted(peer: LiveStreamStagePeer) {\n        // when localUser's join request is accepted by host\n    }\n\n    public func onJoinRequestRejected(peer: LiveStreamStagePeer) {\n        // when localUser's join request is rejected by host\n    }\n\n    public func onLiveStreamEnded() {\n        // when livestream is ended\n    }\n\n    public func onLiveStreamEnding() {\n        // when livestream is ending\n    }\n\n    public func onLiveStreamErrored() {\n        // errored livestream\n    }\n\n    public func onLiveStreamStarted() {\n        // when livestream is started\n    }\n\n    public func onLiveStreamStarting() {\n        // when livestream is starting\n    }\n\n    public func onLiveStreamStateUpdate(data: DyteLivestreamData) {\n        // when there is an update in state of the livestream\n    }\n\n    public func onStageCountUpdated(count: Int32) {\n        // when stage count updates in livestream\n    }\n\n    public func onStageRequestsUpdated(requests: [LiveStreamStageRequestPeer]) {\n        // when there are updates in stage requests\n    }\n\n    public func onViewerCountUpdated(count: Int32) {\n        // when viewer count updates in livestream\n    }\n\n}\n\nmeeting.addLiveStreamEventsListener(liveStreamEventsListener: self)\n")),(0,r.kt)("h2",{id:"livestream-events"},"Livestream events"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onlivestreamstarting"},"onLiveStreamStarting"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when the livestream is about to start.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onlivestreamstarted"},"onLiveStreamStarted"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when the livestream has started.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onlivestreamstateupdate"},"onLiveStreamStateUpdate"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when the livestream state is updated.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onviewercountupdated"},"onViewerCountUpdated"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when the viewer count is updated.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onlivestreamending"},"onLiveStreamEnding"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when the livestream is about to end.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onlivestreamended"},"onLiveStreamEnded"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when the livestream has ended.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onlivestreamerrored"},"onLiveStreamErrored"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when their is an error while starting/stopping the livestream.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onstagecountupdated"},"onStageCountUpdated"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when the number of users on stage is updated. The ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," object contains the updated stage count.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onstagerequestsupdated"},"onStageRequestsUpdated"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when the stage requests are updated. The ",(0,r.kt)("inlineCode",{parentName:"p"},"requests")," object contains the updated list of stage requests.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onjoinrequestaccepted"},"onJoinRequestAccepted"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when a stage request is accepted. The ",(0,r.kt)("inlineCode",{parentName:"p"},"peer")," object contains the peer whose request is accepted."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"  public func onJoinRequestAccepted(peer: LiveStreamStagePeer) {}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"onjoinrequestrejected"},"onJoinRequestRejected"),(0,r.kt)("p",{parentName:"li"},"This event is triggered when a stage request is rejected. The ",(0,r.kt)("inlineCode",{parentName:"p"},"peer")," object contains the peer whose request is rejected."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"  public func onJoinRequestRejected(peer: LiveStreamStagePeer) {}\n")))))}d.isMDXComponent=!0}}]);