"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[53259],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),u=a,f=m["".concat(c,".").concat(u)]||m[u]||g[u]||s;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51560:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>g});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const o={title:"Receiving chat messages",description:"Receive chat messages that has been sent in a meeting.",sidebar_position:3,tags:["mobile-core","chat"]},c="Receiving chat messages",l={unversionedId:"chat/receiving-chat-messages",id:"chat/receiving-chat-messages",title:"Receiving chat messages",description:"Receive chat messages that has been sent in a meeting.",source:"@site/docs/ios-core/chat/receiving-chat-messages.mdx",sourceDirName:"chat",slug:"/chat/receiving-chat-messages",permalink:"/ios-core/chat/receiving-chat-messages",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/ios-core/chat/receiving-chat-messages.mdx",tags:[{label:"mobile-core",permalink:"/ios-core/tags/mobile-core"},{label:"chat",permalink:"/ios-core/tags/chat"}],version:"current",lastUpdatedAt:1692164292,formattedLastUpdatedAt:"2023\ub144 8\uc6d4 16\uc77c",sidebarPosition:3,frontMatter:{title:"Receiving chat messages",description:"Receive chat messages that has been sent in a meeting.",sidebar_position:3,tags:["mobile-core","chat"]},sidebar:"tutorialSidebar",previous:{title:"Sending a chat message",permalink:"/ios-core/chat/sending-a-chat-message"},next:{title:"Introduction",permalink:"/ios-core/livestream/introduction"}},p={},g=[],m={toc:g};function u(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)("wrapper",s(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"receiving-chat-messages"},"Receiving chat messages"),(0,r.kt)("p",null,"To be able to receive chat messages you need to implement a method\n",(0,r.kt)("inlineCode",{parentName:"p"},"onChatUpdates()")," method from callback ",(0,r.kt)("inlineCode",{parentName:"p"},"DyteChatEventsListener"),". You can\nsubscribe to this events by calling\n",(0,r.kt)("inlineCode",{parentName:"p"},"meeting.addMeetingEventsListener(dyteChatEventsListener)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteChatEventsListener {\n      func onChatUpdates(messages: [DyteChatMessage]) {\n        // any update in chat messages\n      }\n\n      func onNewChatMessage(message: DyteChatMessage) {\n        // updates for new chat messages only\n      }\n    }\n")),(0,r.kt)("p",null,"Here, the ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Message"),", as defined in\n",(0,r.kt)("a",{parentName:"p",href:"./introduction"},"introduction"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"messages")," is a list of all chat messages in the\nmeeting, which is the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"meeting.chat.messages"),"."),(0,r.kt)("p",null,"When a chat message is received, the ",(0,r.kt)("inlineCode",{parentName:"p"},"meeting.chat.messages")," list is also\nupdated."),(0,r.kt)("p",null,"DyteChatMessage has different implementations of it, thus you will need to cast and use appropriate type as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'   func onNewChatMessage(message: DyteChatMessage) {\n    if let msg = message {\n      switch msg.type {\n      case .text:\n        if let textMsg = msg as? DyteTextMessage {\n          //print("onNewChatMessage: Text : \\(textMsg)")\n        }\n      case .file:\n        if let fileMsg = msg as? DyteFileMessage {\n          //print("onNewChatMessage: File : \\(fileMsg.name)")\n        }\n      case .image:\n        if let imgMsg = msg as? DyteImageMessage {\n           //print("onNewChatMessage: Image : \\(imgMsg.link)")\n        }\n\n      default:\n        print("Error! Message type unknown!")\n      }\n    }\n')))}u.isMDXComponent=!0}}]);