"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[2668],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=m(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},18877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>m,toc:()=>p});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const c={title:"Room Metadata",description:"All metadata pertaining to a meeting.",sidebar_position:4,tags:["web-core","room-metadata"]},l="Room Metadata",m={unversionedId:"react-web-core/room-metadata",id:"react-web-core/room-metadata",title:"Room Metadata",description:"All metadata pertaining to a meeting.",source:"@site/docs/archive/react-web-core/room-metadata.mdx",sourceDirName:"react-web-core",slug:"/react-web-core/room-metadata",permalink:"/archive/react-web-core/room-metadata",draft:!1,tags:[{label:"web-core",permalink:"/archive/tags/web-core"},{label:"room-metadata",permalink:"/archive/tags/room-metadata"}],version:"current",lastUpdatedAt:1693223168,formattedLastUpdatedAt:"2023\ub144 8\uc6d4 28\uc77c",sidebarPosition:4,frontMatter:{title:"Room Metadata",description:"All metadata pertaining to a meeting.",sidebar_position:4,tags:["web-core","room-metadata"]},sidebar:"tutorialSidebar",previous:{title:"Other Methods",permalink:"/archive/react-web-core/local-user/extras"},next:{title:"Participants",permalink:"/archive/react-web-core/participants/"}},s={},p=[],u={toc:p};function d(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"room-metadata"},"Room Metadata"),(0,r.kt)("p",null,"All metadata pertaining to a meeting is stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"meeting.meta"),". This includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"viewType"),": Indicates the type of the meeting, possible values are ",(0,r.kt)("inlineCode",{parentName:"li"},"WEBINAR"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"GROUP_CALL"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"roomType"),": Indicates the meeting is a group-call or a webinar."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"meetingTitle"),": The title of the meeting."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"meetingStartedTimestamp"),": The timestamp when the meeting started."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"socketConnected"),": Boolean flag to show when the socket is connected.")),(0,r.kt)("p",null,"For example, if you want to get the title of the meeting the current participant\nis connected to, you can do so by doing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Destructuring the metadata to get meetingTitle and joined\nconst { meetingTitle } = meeting.meta;\n\nif (meeting.self.roomJoined) {\n  console.log(\n    `The local user has joined a meeting with title ${meetingTitle}.`\n  );\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," object also emits events for indicating the change in the connection\nstate of the room. For example, you can listen for the ",(0,r.kt)("inlineCode",{parentName:"p"},"connected")," event to know\nwhen the local user has successfully joined the room, and for the ",(0,r.kt)("inlineCode",{parentName:"p"},"disconnected"),"\nevent to find out if the local user's connection has dropped."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const meetingconnected = useDyteSelector(\n  (meeting) => meeting.meta.socketConnected\n);\nuseEffect(() => {\n  console.log('I got meetingconnected as: ', meetingconnected);\n}, [meetingconnected]);\n\nconst meetingTitle = useDyteSelector((meeting) => meeting.meta.meetingTitle);\nuseEffect(() => {\n  console.log('I got meetingTitle as: ', meetingTitle);\n}, [meetingTitle]);\n\nconst meetingStartedTimestamp = useDyteSelector(\n  (meeting) => meeting.meta.meetingStartedTimestamp\n);\nuseEffect(() => {\n  console.log('I got meetingStartedTimestamp as: ', meetingStartedTimestamp);\n}, [meetingStartedTimestamp]);\n")))}d.isMDXComponent=!0}}]);