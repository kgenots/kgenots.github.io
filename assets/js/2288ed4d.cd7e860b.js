"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[554],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),l=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,v=u["".concat(o,".").concat(h)]||u[h]||d[h]||i;return n?r.createElement(v,p(p({ref:t},s),{},{components:n})):r.createElement(v,p({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,p=new Array(i);p[0]=u;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,p[1]=c;for(var l=2;l<i;l++)p[l]=n[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},97659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>d});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const c={title:"Participant Events",description:"Event handling for participants.",sidebar_position:3,tags:["flutter-core","participants","self"]},o=void 0,l={unversionedId:"flutter-core/participants/events",id:"flutter-core/participants/events",title:"Participant Events",description:"Event handling for participants.",source:"@site/docs/archive/flutter-core/participants/events.mdx",sourceDirName:"flutter-core/participants",slug:"/flutter-core/participants/events",permalink:"/archive/flutter-core/participants/events",draft:!1,tags:[{label:"flutter-core",permalink:"/archive/tags/flutter-core"},{label:"participants",permalink:"/archive/tags/participants"},{label:"self",permalink:"/archive/tags/self"}],version:"current",sidebarPosition:3,frontMatter:{title:"Participant Events",description:"Event handling for participants.",sidebar_position:3,tags:["flutter-core","participants","self"]},sidebar:"tutorialSidebar",previous:{title:"The participant object",permalink:"/archive/flutter-core/participants/participant-object"},next:{title:"Introducing chat",permalink:"/archive/flutter-core/chat/introduction"}},s={},d=[{value:"Participant joined",id:"participant-joined",level:2},{value:"Participant updated",id:"participant-updated",level:2},{value:"Participant left",id:"participant-left",level:2},{value:"Video update",id:"video-update",level:2},{value:"Video view",id:"video-view",level:2},{value:"Audio update",id:"audio-update",level:2},{value:"Screen share update",id:"screen-share-update",level:2},{value:"Screen share participants list",id:"screen-share-participants-list",level:2},{value:"Screen share view",id:"screen-share-view",level:2},{value:"Active Participants changed",id:"active-participants-changed",level:2}],u={toc:d};function h(e){var{components:t}=e,n=p(e,["components"]);return(0,r.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"participant-joined"},"Participant joined"),(0,r.kt)("p",null,"Trigger an event when any participant joins the meeting."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class ParticipantsEventListener extends DytePartcipantEventsListener {\n  ...\n  @override\n  void onParticipantJoin(DyteMeetingParticipant participant) {\n    // your code here to handle new participant\n  }\n  ...\n}\n")),(0,r.kt)("h2",{id:"participant-updated"},"Participant updated"),(0,r.kt)("p",null,"Trigger an event when any participant update in meeting. For example, when a participant changes their name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"...\n\n@override\nvoid onParticipantUpdated(DyteMeetingParticipant participant) {\n         // your code here to handle new participant\n}\n\n...\n")),(0,r.kt)("h2",{id:"participant-left"},"Participant left"),(0,r.kt)("p",null,"Trigger an event when any participant leaves the meeting."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"...\n\n@override\nvoid onParticipantLeave(DyteMeetingParticipant participant) {\n         // your code here to handle participant left from meeting\n}\n\n...\n")),(0,r.kt)("h2",{id:"video-update"},"Video update"),(0,r.kt)("p",null,"Trigger an event when any participant starts or stops the video."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"...\n\n@override\nvoid onVideoUpdate({\n required bool videoEnabled,\n required DyteMeetingParticipant participant,\n}) {\n         // your code here to handle participant video toggle update\n}\n\n...\n")),(0,r.kt)("h2",{id:"video-view"},"Video view"),(0,r.kt)("p",null,"To access the video view of a participant, create an object of the ",(0,r.kt)("inlineCode",{parentName:"p"},"VideoView")," class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// To show the video of a participant\nfinal videoView = VideoView(meetingParticipant: participant);\n// To get video view for a local user\nfinal selfVideoView = VideoView(isSelfTrue: true);\n")),(0,r.kt)("h2",{id:"audio-update"},"Audio update"),(0,r.kt)("p",null,"Triggers an event when a participant starts or stops the audio."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"...\n\n@override\nvoid onAudioUpdate({\n required bool audioEnabled,\n required DyteMeetingParticipant participant,\n}) {\n    // your code here to handle participant audio toggle update\n}\n\n...\n")),(0,r.kt)("h2",{id:"screen-share-update"},"Screen share update"),(0,r.kt)("p",null,"Triggers an event when a participant starts or stops screen share."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"...\n\n@override\nvoid onScreenShareStarted(DyteMeetingParticipant participant) {\n  /// handle screen share started of `DyteMeetingParticipant` participant\n}\n\n@override\nvoid onScreenShareEnded(DyteMeetingParticipant participant) {\n  /// handle screen share ended of `DyteMeetingParticipant` participant\n}\n\n...\n")),(0,r.kt)("h2",{id:"screen-share-participants-list"},"Screen share participants list"),(0,r.kt)("p",null,"Obtain the list of the screenshare participants, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"participants.screenshares")," function which returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"DyteRoomParticipants")," object that maintains a record of participants who have joined, pinned, and screenshared. This object updates with each ",(0,r.kt)("inlineCode",{parentName:"p"},"onUpdate")," call."),(0,r.kt)("h2",{id:"screen-share-view"},"Screen share view"),(0,r.kt)("p",null,"To get the screenshare widget, create an object of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScreenshareView")," class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// To show screenshare of a participant\nfinal screenshareView = ScreenShareView(meetingParticipant);\n")),(0,r.kt)("h2",{id:"active-participants-changed"},"Active Participants changed"),(0,r.kt)("p",null,"This event is triggered when the active participant changes, for example, when the user moves to the next page of participants. It provides the list of participants on the current page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"...\n\n@override\nvoid onActiveParticipantsChanged(List<DyteMeetingParticipant> active) {\n  /// handle active participants changed\n}\n\n...\n")),(0,r.kt)("p",null,"Other callbacks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onActiveSpeakerChanged(DyteMeetingParticipant participant)"),": Triggered when active speaker is changed to ",(0,r.kt)("code",null,"participant"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onNoActiveSpeaker()"),": Triggered when there is no active participant."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onParticipantPinned(DyteMeetingParticipant participant)"),": Triggered when the ",(0,r.kt)("code",null,"participant")," is pinned."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onParticipantUnpinned(DyteMeetingParticipant participant)"),": Trigerred when participant is unpinned.")))}h.isMDXComponent=!0}}]);