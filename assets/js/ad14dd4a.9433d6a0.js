"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[46323],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=l(n),u=i,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(h,p(p({ref:t},s),{},{components:n})):a.createElement(h,p({ref:t},s))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,p=new Array(r);p[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,p[1]=o;for(var l=2;l<r;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},14294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});n(67294);var a=n(3905);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const o={title:"Participants",description:"Events, methods and data pertaining to meeting participants.",sidebar_position:1,tags:["web-core","participants","participant"]},c="Participants",l={unversionedId:"participants/participants",id:"participants/participants",title:"Participants",description:"Events, methods and data pertaining to meeting participants.",source:"@site/docs/web-core/participants/participants.mdx",sourceDirName:"participants",slug:"/participants/",permalink:"/web-core/participants/",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/web-core/participants/participants.mdx",tags:[{label:"web-core",permalink:"/web-core/tags/web-core"},{label:"participants",permalink:"/web-core/tags/participants"},{label:"participant",permalink:"/web-core/tags/participant"}],version:"current",lastUpdatedAt:1692164292,formattedLastUpdatedAt:"Aug 16, 2023",sidebarPosition:1,frontMatter:{title:"Participants",description:"Events, methods and data pertaining to meeting participants.",sidebar_position:1,tags:["web-core","participants","participant"]},sidebar:"tutorialSidebar",previous:{title:"Room Metadata",permalink:"/web-core/room-metadata"},next:{title:"The participant object",permalink:"/web-core/participants/participant-object"}},s={},d=[{value:"Set participant view mode",id:"set-participant-view-mode",level:2},{value:"Set page number in paginated mode",id:"set-page-number-in-paginated-mode",level:2},{value:"Host control methods",id:"host-control-methods",level:2},{value:"Webinar methods",id:"webinar-methods",level:2},{value:"Waiting room methods",id:"waiting-room-methods",level:2}],m={toc:d};function u(e){var{components:t}=e,n=p(e,["components"]);return(0,a.kt)("wrapper",r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"participants"},"Participants"),(0,a.kt)("p",null,"The data regarding all meeting participants is stored under\n",(0,a.kt)("inlineCode",{parentName:"p"},"meeting.participants"),". This ",(0,a.kt)("strong",{parentName:"p"},"does not")," include the local user. Use the\nmethods and events to consume the participants data. For example, to get all the\nparticipants who joined the meeting:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// get all joined participants\nconst joinedParticipants = meeting.participants.joined;\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"meeting.participants")," object has the following properties."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"joined"),": A map that contains all the participants who have joined the meeting\nexcept the local user"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"waitlisted"),": A map that contains all the participants waiting to join the\nmeeting."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"active"),": A map that contains all the participants except the local user who\nare supposed to be on the screen at the moment"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pinned"),": A map that contains all the pinned participants of the meeting."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"count"),": The number of participants who are joined in the meeting."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pageCount"),": Number of pages available in paginated mode."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maxActiveParticipantsCount"),": The maximum number of participants that can be\npresent in the active state."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lastActiveSpeaker "),": This stores the ",(0,a.kt)("inlineCode",{parentName:"li"},"participantId")," of the last participant\nwho spoke in the meeting.")),(0,a.kt)("p",null,"Therefore, if you were to make a grid of participants, you'd use the ",(0,a.kt)("inlineCode",{parentName:"p"},"active"),"\nmap, but to display all participants in the meeting you'd use the ",(0,a.kt)("inlineCode",{parentName:"p"},"joined")," map."),(0,a.kt)("p",null,"Each participant in each of the ",(0,a.kt)("inlineCode",{parentName:"p"},"joined"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"waitlisted"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"active"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"pinned"),"\nmaps is of type ",(0,a.kt)("a",{parentName:"p",href:"/web-core/reference/DyteParticipant"},(0,a.kt)("inlineCode",{parentName:"a"},"DyteParticipant")),". Read more\nabout each individual ",(0,a.kt)("inlineCode",{parentName:"p"},"participant")," object\n",(0,a.kt)("a",{parentName:"p",href:"/web-core/participants/participant-object"},"here"),"."),(0,a.kt)("p",null,"Each of these maps are of type\n",(0,a.kt)("a",{parentName:"p",href:"/web-core/reference/DyteParticipantMap"},(0,a.kt)("inlineCode",{parentName:"a"},"DyteParticipantMap")),", and therefore emit a\n",(0,a.kt)("inlineCode",{parentName:"p"},"participantJoined")," event when a participant is added to the map, and a\n",(0,a.kt)("inlineCode",{parentName:"p"},"participantLeft")," event when a participant leaves the map. For instance, to\nlisten for when a participant gets pinned in the meeting, you can use the\nfollowing snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"meeting.participants.pinned.on('participantJoined', (participant) => {\n  console.log(`Participant ${participant.name} got pinned`);\n});\n")),(0,a.kt)("h2",{id:"set-participant-view-mode"},"Set participant view mode"),(0,a.kt)("p",null,"The view mode indicates whether the participants are populated in ",(0,a.kt)("inlineCode",{parentName:"p"},"ACTIVE_GRID"),"\nmode or ",(0,a.kt)("inlineCode",{parentName:"p"},"PAGINATED")," mode. In ",(0,a.kt)("inlineCode",{parentName:"p"},"ACTIVE_GRID")," mode, the participants are\nautomatically replaced in ",(0,a.kt)("inlineCode",{parentName:"p"},"meeting.participants.active"),", based on who is\nspeaking or who has their video turned on."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"PAGINATED")," mode, the participants in ",(0,a.kt)("inlineCode",{parentName:"p"},"meeting.participants.active")," will be\nfixed. Only when you call the ",(0,a.kt)("inlineCode",{parentName:"p"},"meeting.participants.setPage(pageNumber)")," method,\nit will replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"active")," participants with a different set of participants."),(0,a.kt)("p",null,"You can change the participant view between ",(0,a.kt)("inlineCode",{parentName:"p"},"ACTIVE_GRID")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"PAGINATED")," mode\nusing the following method. This will trigger ",(0,a.kt)("inlineCode",{parentName:"p"},"viewModeChanged")," event as a side\naffect."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// set the view mode to paginated\nawait meeting.participants.setViewMode('PAGINATED');\n\n// set the view mode to active grid\nawait meeting.participants.setViewMode('ACTIVE_GRID');\n")),(0,a.kt)("h2",{id:"set-page-number-in-paginated-mode"},"Set page number in paginated mode"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"setPage()")," method allows you to switch between pages of participants\npresent in the meeting."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// switch to second page\nawait meeting.participants.setPage(2);\n")),(0,a.kt)("h2",{id:"host-control-methods"},"Host control methods"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"meeting.participants")," object has host control methods that allow you to\ndisable the audio and video streams of other users in the meeting (given that\nthe user preset has the right permissions)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// mute all participants\nawait meeting.participants.disableAllAudio();\n\n// disable video for all participants\nawait meeting.participants.disableAllVideo();\n\n// mute a participant\nconst participantId = '...';\nawait meeting.participants.disableAudio(participantId);\n\n// disable video for a participant\nconst participantId = '...';\nawait meeting.participants.disableVideo(participantId);\n")),(0,a.kt)("p",null,"To remove participants from a meeting, you can call the ",(0,a.kt)("inlineCode",{parentName:"p"},"kick()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"kickAll()"),"\nmethod. The ",(0,a.kt)("inlineCode",{parentName:"p"},"kick()")," method accepts a parameter called ",(0,a.kt)("inlineCode",{parentName:"p"},"participantId")," (type\n",(0,a.kt)("inlineCode",{parentName:"p"},"string"),"). This is the ID of participant to be kicked."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// remove all participants from the meeting\nawait meeting.participants.kickAll();\n\n// remove a participant from the meeting\nconst participantId = '...';\nawait meeting.participants.kick(participantId);\n")),(0,a.kt)("h2",{id:"webinar-methods"},"Webinar methods"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"acceptAllRequestToJoinStageRequests()")," method lets the host accept all\npending requests to join a webinar."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"await meeting.participants.joined.acceptAllRequestToJoinStageRequests();\n")),(0,a.kt)("h2",{id:"waiting-room-methods"},"Waiting room methods"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"acceptWaitingRoomRequest()")," method accepts requests from waitlisted\nparticipants if user has appropriate permissions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"await meeting.participants.joined.acceptWaitingRoomRequest(participantId);\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rejectWaitingRoomRequest()")," method requests from waitlisted participants if\nuser has appropriate permissions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"await meeting.participants.joined.rejectWaitingRoomRequest(participantId);\n")))}u.isMDXComponent=!0}}]);