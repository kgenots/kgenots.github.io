"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[34594],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=d;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88439:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>u});n(67294);var r=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const a={title:"Introduction",description:"Create, receive and interact with polls in a meeting.",sidebar_position:1,tags:["flutter-core","polls"]},p="Introduction",s={unversionedId:"polls/introduction",id:"polls/introduction",title:"Introduction",description:"Create, receive and interact with polls in a meeting.",source:"@site/docs/flutter-core/polls/introduction.mdx",sourceDirName:"polls",slug:"/polls/introduction",permalink:"/flutter-core/polls/introduction",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/flutter-core/polls/introduction.mdx",tags:[{label:"flutter-core",permalink:"/flutter-core/tags/flutter-core"},{label:"polls",permalink:"/flutter-core/tags/polls"}],version:"current",lastUpdatedAt:1692164292,formattedLastUpdatedAt:"2023\ub144 8\uc6d4 16\uc77c",sidebarPosition:1,frontMatter:{title:"Introduction",description:"Create, receive and interact with polls in a meeting.",sidebar_position:1,tags:["flutter-core","polls"]},sidebar:"tutorialSidebar",previous:{title:"Livestream event listeners",permalink:"/flutter-core/livestream/dyte-livestream-listener"},next:{title:"Creating a poll",permalink:"/flutter-core/polls/creating-a-poll"}},c={},u=[{value:"Listening to new polls in a meeting",id:"listening-to-new-polls-in-a-meeting",level:2}],d={toc:u};function m(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)("wrapper",l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The meetings polls object can be accessed using ",(0,r.kt)("inlineCode",{parentName:"p"},"dyteClient.polls"),". It provides\nmethods to create polls, vote, and more."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dyteClient.polls.polls")," returns an array of all polls created in a meeting,\nwhere each element is an object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"DytePollMessage"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"DytePollMessage")," class has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": Unique ID assigned to each poll."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"question"),": Question of the poll."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"anonymous"),": To hide the votes of each user even after completion. (false by\ndefault)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hideVotes"),": Hide votes until the voting is complete. (enabled if anonymous is\nenabled)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"createdBy"),": Name of creator the poll."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options"),": Array of ",(0,r.kt)("inlineCode",{parentName:"li"},"DytePollOption")," object, contains all the options to the\npoll question.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DytePollOption")," has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"text")," : Contains the option text."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"votes")," : List of ",(0,r.kt)("inlineCode",{parentName:"li"},"DytePollVote")," object, which contains info about voters of\nthis option."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"count")," : Int of number of votes given to this option.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DytePollVote")," has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")," : ID of the voter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," : Name of the voter.")),(0,r.kt)("h2",{id:"listening-to-new-polls-in-a-meeting"},"Listening to new polls in a meeting"),(0,r.kt)("p",null,"To be able to receive new poll messages you need to implement a method\n",(0,r.kt)("inlineCode",{parentName:"p"},"onPollUpdates()")," method from callback ",(0,r.kt)("inlineCode",{parentName:"p"},"DytePollEventsListener"),":"),(0,r.kt)("p",null,"To get poll updates, listen to ",(0,r.kt)("inlineCode",{parentName:"p"},"onPollUpdates()")," callback:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"\nclass PollEventsListeners extends DytePollEventsListener {\n\n  ...\n\n  @override\n  void onPollUpdates(List<DytePollMessage> polls) {\n    /// code to handle polls\n  }\n\n  @override\n  void onNewPoll(DytePollMessage poll) {\n    /// code to handle new poll\n  }\n\n  ...\n}\n\n")),(0,r.kt)("p",null,"You can subscribe to this events by ",(0,r.kt)("inlineCode",{parentName:"p"},"addPollEventsListener")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"dyteClient.addPollEventsListener(PollEventsListeners());\n")))}m.isMDXComponent=!0}}]);