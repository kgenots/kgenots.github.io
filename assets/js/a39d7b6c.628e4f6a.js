"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[30608],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69179:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});n(67294);var a=n(3905);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const s={title:"Add a Custom Button to the Control Bar",sidebar_position:1},c=void 0,l={unversionedId:"capabilities/customization/add-button-control-bar",id:"capabilities/customization/add-button-control-bar",title:"Add a Custom Button to the Control Bar",description:"Dyte's UI kit provides a convenient solution for customizing the UI of your Dyte meetings including control bar. The control bar is an essential component of any meeting platform, allowing users to access various meeting controls such as audio and video settings, screen sharing, recording, and more. Using Dyte's UI kit you can customize the control bar, for example, add a hand-raise button, rename a button, and so on.",source:"@site/docs/guides/capabilities/customization/add-button-control-bar.mdx",sourceDirName:"capabilities/customization",slug:"/capabilities/customization/add-button-control-bar",permalink:"/guides/capabilities/customization/add-button-control-bar",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/guides/capabilities/customization/add-button-control-bar.mdx",tags:[],version:"current",lastUpdatedAt:1692164292,formattedLastUpdatedAt:"2023\ub144 8\uc6d4 16\uc77c",sidebarPosition:1,frontMatter:{title:"Add a Custom Button to the Control Bar",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Customize Your Meetings",permalink:"/guides/capabilities/customization/"},next:{title:"Add Virtual Background to Dyte Meetings",permalink:"/guides/capabilities/customization/add-virtual-background"}},p={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create a meeting interface",id:"step-1-create-a-meeting-interface",level:2},{value:"App.jsx",id:"appjsx",level:3},{value:"App.css",id:"appcss",level:3},{value:"Step 2: Add a custom button (raise hand) in the control bar",id:"step-2-add-a-custom-button-raise-hand-in-the-control-bar",level:2},{value:"Step 3: Implement the <code>raiseHand</code> function",id:"step-3-implement-the-raisehand-function",level:2},{value:"Step 4: Listen for the broadcasted message",id:"step-4-listen-for-the-broadcasted-message",level:2}],u={toc:d};function m(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Dyte's UI kit provides a convenient solution for customizing the UI of your Dyte meetings including control bar. The control bar is an essential component of any meeting platform, allowing users to access various meeting controls such as audio and video settings, screen sharing, recording, and more. Using Dyte's UI kit you can customize the control bar, for example, add a hand-raise button, rename a button, and so on."),(0,a.kt)("p",null,"This guide will take you through the process of adding a hand-raise button to the control bar of your meeting."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Review ",(0,a.kt)("a",{parentName:"li",href:"/react-ui-kit#components-of-dytemeeting"},"Components of DyteMeeting")),(0,a.kt)("li",{parentName:"ul"},"Review the ",(0,a.kt)("a",{parentName:"li",href:"/react-ui-kit/quickstart#step-2-get-started-with-dyte-prebuilt-components"},"Get Started with Dyte Prebuilt Components")," and ",(0,a.kt)("a",{parentName:"li",href:"/react-ui-kit/quickstart#example-using-prebuilt-dytemeeting-component"},"Example")," sections in the React UI kit quickstart"),(0,a.kt)("li",{parentName:"ul"},"Integrate ",(0,a.kt)("a",{parentName:"li",href:"/react-ui-kit/basics/integrate#dyteparticipantsaudio"},"DyteParticipantsAudio")),(0,a.kt)("li",{parentName:"ul"},"Integrate ",(0,a.kt)("a",{parentName:"li",href:"/react-ui-kit/basics/integrate#dytenotifications"},"DyteNotifications"))),(0,a.kt)("h2",{id:"step-1-create-a-meeting-interface"},"Step 1: Create a meeting interface"),(0,a.kt)("p",null,"Meeting setup consists of two files ",(0,a.kt)("inlineCode",{parentName:"p"},"App.jsx")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"App.css"),"."),(0,a.kt)("h3",{id:"appjsx"},"App.jsx"),(0,a.kt)("p",null,"To create ",(0,a.kt)("inlineCode",{parentName:"p"},"App.jsx"),", you need to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Import the necessary dependencies and styles"),(0,a.kt)("li",{parentName:"ul"},"Set up the meeting using the ",(0,a.kt)("inlineCode",{parentName:"li"},"useEffect")," hook"),(0,a.kt)("li",{parentName:"ul"},"Render the meeting components")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React, { useEffect, useState } from 'react';\nimport { useDyteClient, DyteProvider } from '@dytesdk/react-web-core';\nimport {\n  DyteParticipantsAudio,\n  DyteNotifications,\n  DyteGrid,\n  DyteMicToggle,\n  DyteCameraToggle,\n  DyteSettingsToggle,\n  DyteHeader,\n} from '@dytesdk/react-ui-kit'\nimport './App.css';\n\nuseEffect(() => {\n    initClient({\n      authToken: '<auth-token>',\n      defaults: {\n        audio: false,\n        video: true,\n      },\n    });\n }, []);\n\nif (!client) return (<div>Loading Dyte Meeting...</div>);\n\nreturn (\n  <div className=\"dyte-meeting\">\n  <DyteProvider value={client}>\n      <DyteParticipantsAudio meeting={client} />\n      <DyteNotifications\n        meeting={client}\n        config={{\n          config: {\n            notifications: ['chat', 'participant_joined', 'participant_left'],\n            notification_sounds: ['chat', 'participant_joined', 'participant_left'],\n            participant_joined_sound_notification_limit: 10,\n            participant_chat_message_sound_notification_limit: 10,\n          },\n        }}\n      />\n      <DyteHeader meeting={client} />\n      <div className=\"grid-container\">\n        <DyteGrid meeting={client} style={{ height: '100%' }} />\n      </div>\n      <div class=\"controlbar\">\n        <DyteMicToggle meeting={client} />\n        <DyteCameraToggle meeting={client} />\n        <DyteSettingsToggle meeting={client} />\n      </div>\n  </DyteProvider>\n  </div>\n);\n}\n\nexport default App;\n")),(0,a.kt)("h3",{id:"appcss"},"App.css"),(0,a.kt)("p",null,"Here is an example of how your App.css file could be structured:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"html {\n height: 100vh;\n width: 100vw;\n margin: 0;\n}\n\n.grid-container {\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n}\n\n.controlbar {\n  height: fit-content;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n}\n\n.dyte-meeting {\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n  background: black;\n  flex-direction: column;\n}\n\n.active-button {\n  color: red;\n}\n")),(0,a.kt)("h2",{id:"step-2-add-a-custom-button-raise-hand-in-the-control-bar"},"Step 2: Add a custom button (raise hand) in the control bar"),(0,a.kt)("p",null,"Once you've created your Dyte meeting, import the ",(0,a.kt)("inlineCode",{parentName:"p"},"DyteControlbarButton")," and create a state to manage the UI."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const [handRaised, setHandRaised] = useState(false);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"<DyteControlbarButton\n  label=\"Raise Hand\"\n  icon={handSvg}\n  onClick={raiseHand}\n  className={handRaised ? 'active-button' : ''}\n/>\n")),(0,a.kt)("h2",{id:"step-3-implement-the-raisehand-function"},"Step 3: Implement the ",(0,a.kt)("inlineCode",{parentName:"h2"},"raiseHand")," function"),(0,a.kt)("p",null,"When a user clicks the control bar button, you can use the broadcast API exposed by web core to send a message to all peers in the meeting. This can be achieved by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"broadcastMessage")," method, which requires two parameters: a ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"payload"),"."),(0,a.kt)("p",null,"In the payload, include the peer's ID and display name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const raiseHand = async () => {\n  await client.participants.broadcastMessage('hand-raise', {\n    id: client.self.id,\n    name: client.self.name,\n  });\n  setHandRaised(!handRaised);\n};\n")),(0,a.kt)("h2",{id:"step-4-listen-for-the-broadcasted-message"},"Step 4: Listen for the broadcasted message"),(0,a.kt)("p",null,"When the event is fired a notification is sent to the user using the ",(0,a.kt)("inlineCode",{parentName:"p"},"sendNotification")," method exposed by ",(0,a.kt)("inlineCode",{parentName:"p"},"@dytesdk/react-ui-kit"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"useEffect(() => {\n  if (!client) return;\n  client.participants.on('broadcastedMessage', ({ payload }) => {\n    const notificationObj = {\n      id: new Date().getTime().toString(),\n      message: `Hand Raised by ${payload.name}`,\n      duration: 3000,\n    };\n    sendNotification(notificationObj, 'message');\n  });\n\n  return () => {\n    client.participants.removeAllListeners('broadcastedMessage');\n  };\n}, [client]);\n")))}m.isMDXComponent=!0}}]);