"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[85352],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,v=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return r?n.createElement(v,o(o({ref:t},d),{},{components:r})):n.createElement(v,o({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},47811:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>u});r(67294);var n=r(3905);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}const s={title:"Livestream event listeners",description:"Livestream events to listen to for triggering",sidebar_position:3,tags:["flutter-core","livestream"]},l=void 0,p={unversionedId:"flutter-core/livestream/dyte-livestream-listener",id:"flutter-core/livestream/dyte-livestream-listener",title:"Livestream event listeners",description:"Livestream events to listen to for triggering",source:"@site/docs/archive/flutter-core/livestream/dyte-livestream-listener.mdx",sourceDirName:"flutter-core/livestream",slug:"/flutter-core/livestream/dyte-livestream-listener",permalink:"/archive/flutter-core/livestream/dyte-livestream-listener",draft:!1,tags:[{label:"flutter-core",permalink:"/archive/tags/flutter-core"},{label:"livestream",permalink:"/archive/tags/livestream"}],version:"current",sidebarPosition:3,frontMatter:{title:"Livestream event listeners",description:"Livestream events to listen to for triggering",sidebar_position:3,tags:["flutter-core","livestream"]},sidebar:"tutorialSidebar",previous:{title:"Livestream objects & methods",permalink:"/archive/flutter-core/livestream/dyte-livestream-object"},next:{title:"Introduction",permalink:"/archive/flutter-core/polls/introduction"}},d={},u=[{value:"Livestream events",id:"livestream-events",level:2}],c={toc:u};function m(e){var{components:t}=e,r=o(e,["components"]);return(0,n.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){a(e,t,r[t])}))}return e}({},c,r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"You can listen to livestream events by attaching a listener ",(0,n.kt)("inlineCode",{parentName:"p"},"addLivestreamEventsListener")," on ",(0,n.kt)("inlineCode",{parentName:"p"},"dyteMobileClient")," object where ",(0,n.kt)("inlineCode",{parentName:"p"},"dyteMobileClient")," is an instance of ",(0,n.kt)("inlineCode",{parentName:"p"},"DyteMobileClient()"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"\nclass LivestreamListener implements DyteLivestreamEventsListener {\n  void onLiveStreamStarting() {}\n  void onLiveStreamStarted() {}\n  void onLiveStreamStateUpdate(DyteLivestreamData data) {}\n  void onViewerCountUpdated(int count) {}\n  void onLiveStreamEnding() {}\n  void onLiveStreamEnded() {}\n  void onLiveStreamErrored() {}\n  void onStageCountUpdated(int count) {}\n  void onStageRequestsUpdated(List<DyteLiveStreamStageRequestPeer> requests) {}\n  void onJoinRequestAccepted(DyteLiveStreamStagePeer peer) {}\n  void onJoinRequestRejected(DyteLiveStreamStagePeer peer) {}\n}\n\ndyteMobileClient.addLivestreamEventsListener(LivestreamListener())\n")),(0,n.kt)("h2",{id:"livestream-events"},"Livestream events"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onlivestreamstarting"},"onLiveStreamStarting"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when the livestream is about to start.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onlivestreamstarted"},"onLiveStreamStarted"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when the livestream has started.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onlivestreamstateupdate"},"onLiveStreamStateUpdate"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when the livestream state is updated. The ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"DyteLivestreamData")," object that contains the updated livestream state. You can access the updated livestream state by:"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"  DyteLivestreamData data = dyteMobileClient.livestream.data\n  DyteLivestreamStatus currentStatus = dyteMobileClient.livestream.data.state\n  String? livestreamUrl = dyteMobileClient.livestream.data.url\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onviewercountupdated"},"onViewerCountUpdated"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when the viewer count is updated. The ",(0,n.kt)("inlineCode",{parentName:"p"},"count")," object contains the updated viewer count. You can access the updated viewer count by:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"  int updatedViewerCount = dyteMobileClient.livestream.viewerCount\n")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onlivestreamending"},"onLiveStreamEnding"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when the livestream is about to end.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onlivestreamended"},"onLiveStreamEnded"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when the livestream has ended.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onlivestreamerrored"},"onLiveStreamErrored"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when their is an error while starting/stopping the livestream.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onstagecountupdated"},"onStageCountUpdated"))),(0,n.kt)("p",null,"  This event is triggered when the number of users on stage is updated. The ",(0,n.kt)("inlineCode",{parentName:"p"},"count")," object contains the updated stage count."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"  void onStageCountUpdated(int count) {\n    // count is the updated stage count\n    int updatedStageCount = count\n  }\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onstagerequestsupdated"},"onStageRequestsUpdated"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when the stage requests are updated. The ",(0,n.kt)("inlineCode",{parentName:"p"},"requests")," object contains the updated list of stage requests. You can access the updated list by:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"  void onStageRequestsUpdated(List<DyteLiveStreamStageRequestPeer> requests) {\n\n    // On this callback, the requests object `dyteMobileClient.livestream.requests` is already updated.\n    List<DyteLiveStreamStageRequestPeer> updatedRequests = dyteMobileClient.livestream.requests // returns List<DyteLiveStreamStageRequestPeer>\n    \n    // or\n    List<DyteLiveStreamStageRequestPeer> updatedRequests = requests\n  }\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onjoinrequestaccepted"},"onJoinRequestAccepted"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when a stage request is accepted. The ",(0,n.kt)("inlineCode",{parentName:"p"},"peer")," object contains the peer whose request is accepted."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"  void onJoinRequestAccepted(DyteLiveStreamStagePeer peer) {}\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("h3",{parentName:"li",id:"onjoinrequestrejected"},"onJoinRequestRejected"),(0,n.kt)("p",{parentName:"li"},"This event is triggered when a stage request is rejected. The ",(0,n.kt)("inlineCode",{parentName:"p"},"peer")," object contains the peer whose request is rejected."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"  void onJoinRequestRejected(DyteLiveStreamStagePeer peer) {}\n")))))}m.isMDXComponent=!0}}]);