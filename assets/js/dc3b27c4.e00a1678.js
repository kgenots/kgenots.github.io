"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[78937],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(f,o(o({ref:t},s),{},{components:n})):i.createElement(f,o({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},81226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>p,metadata:()=>c,toc:()=>d});n(67294);var i=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const p={title:"Introduction",description:"Events, methods and data pertaining to meeting participants.",sidebar_position:1,tags:["flutter-core","participants","participant"]},l="Introduction - Participants",c={unversionedId:"flutter-core/participants/introduction",id:"flutter-core/participants/introduction",title:"Introduction",description:"Events, methods and data pertaining to meeting participants.",source:"@site/docs/archive/flutter-core/participants/introduction.mdx",sourceDirName:"flutter-core/participants",slug:"/flutter-core/participants/introduction",permalink:"/archive/flutter-core/participants/introduction",draft:!1,tags:[{label:"flutter-core",permalink:"/archive/tags/flutter-core"},{label:"participants",permalink:"/archive/tags/participants"},{label:"participant",permalink:"/archive/tags/participant"}],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",description:"Events, methods and data pertaining to meeting participants.",sidebar_position:1,tags:["flutter-core","participants","participant"]},sidebar:"tutorialSidebar",previous:{title:"Room Metadata",permalink:"/archive/flutter-core/room-metadata"},next:{title:"The participant object",permalink:"/archive/flutter-core/participants/participant-object"}},s={},d=[{value:"Grid info for the room",id:"grid-info-for-the-room",level:2},{value:"Move between pages in paginated mode",id:"move-between-pages-in-paginated-mode",level:2},{value:"Video update for all participants",id:"video-update-for-all-participants",level:2},{value:"Audio update",id:"audio-update",level:2}],u={toc:d};function m(e){var{components:t}=e,n=o(e,["components"]);return(0,i.kt)("wrapper",r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction---participants"},"Introduction - Participants"),(0,i.kt)("p",null,"The data regarding all meeting participants is stored under ",(0,i.kt)("inlineCode",{parentName:"p"},"participants"),"\nobjects of ",(0,i.kt)("inlineCode",{parentName:"p"},"DyteMobileClient()")," instance. To get all the objects and methods\nrelated to participants:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"  final participants = dyteClient.particiants;\n")),(0,i.kt)("p",null,"Use the methods and events to consume the participants data. For example, to get\nall the participants who joined the meeting:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"// get all joined participants\nfinal joinedParticipants = dyteClient.participants.joined;\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"dyteClient.participants")," object has the following properties."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"waitlisted"),": A list that contains all the participants waiting to join the\nmeeting."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"joined"),": A list that contains all the participants who have joined the\nmeeting."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"active"),": A list that contains all the participants except the local user who\nare supposed to be on the screen at the moment"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"screenshares"),": A list that contains all the participants who have shared\nscreen in the meeting."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pinned"),": Pinned participant of the meeting. It can be nullable as well.")),(0,i.kt)("p",null,"Therefore, if you were to make a grid of participants, you'd use the ",(0,i.kt)("inlineCode",{parentName:"p"},"active"),"\nlist, but to display all participants in the meeting you'd use the ",(0,i.kt)("inlineCode",{parentName:"p"},"joined"),"\nlist."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dyteClient.pinned")," is of type ",(0,i.kt)("inlineCode",{parentName:"li"},"DyteMeetingParticipant"),"."),(0,i.kt)("li",{parentName:"ul"},"All participant in each of the ",(0,i.kt)("inlineCode",{parentName:"li"},"joined"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"waitlisted"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"active"),", and\n",(0,i.kt)("inlineCode",{parentName:"li"},"screenshares")," list is of type ",(0,i.kt)("inlineCode",{parentName:"li"},"DyteMeetingParticipant"),".")),(0,i.kt)("h2",{id:"grid-info-for-the-room"},"Grid info for the room"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DyteGridPagesInfo")," object is designed to help you with pagination decisions. It\nis returned with ",(0,i.kt)("inlineCode",{parentName:"p"},"onGridUpdated")," event. It contains the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currentPageNumber"),": Int, returns the current page number (currently displayed\nby the client)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pageCount"),": Int, max pages possible with current number of participants."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isNextPagePossible"),": bool, if the next page of participants is available."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isPreviousPagePossible"),": bool, if previous page of participants is available.")),(0,i.kt)("h2",{id:"move-between-pages-in-paginated-mode"},"Move between pages in paginated mode"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"setPage(int pageNumber)")," method allows you to switch between pages of\nparticipants present in the meeting."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: Indexing of page starts from 0")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"// switch to page 1\ndyteClient.setPage(1);\n")),(0,i.kt)("h2",{id:"video-update-for-all-participants"},"Video update for all participants"),(0,i.kt)("p",null,"Triggered when any participant of the meeting enable/disable it's video. It also passes the participant details who has updated it's video status."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"class ParticipantNotifier implements DyteParticipantEventsListener{\n\n  ...\n  @override\n  void videoUpdate(\n    bool videoEnabled,\n    DyteMeetingParticipant participant,\n  ) {\n    //\n  }\n  ...\n}\n\n\n")),(0,i.kt)("h2",{id:"audio-update"},"Audio update"),(0,i.kt)("p",null,"Triggered when any participant of the meeting enable/disable it's audio. It also passes the participant details who has updated it's audio status."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"\nclass ParticipantNotifier implements DyteParticipantEventsListener{\n\n  ...\n  @override\n  void audioUpdate(\n    bool audioEnabled,\n    DyteMeetingParticipant participant,\n  ) {\n    //\n  }\n  ...\n}\n\n")))}m.isMDXComponent=!0}}]);